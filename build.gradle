buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.48"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
}

def versionInfo = getGitVersion()
version = "${versionInfo['inventorysorter.version']}"
group= "cpw.mods" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "inventorysorter"

minecraft {
    mappings channel: 'snapshot', version: '20190608-1.14.2'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
        }
    }
}


dependencies {
    minecraft 'net.minecraftforge:forge:1.14.2-26.0.6'
}
/*
task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = file("CHANGELOG.html")
    untaggedName = "Current release ${project.version}"
    templateContent = """
<h1>Inventory sorter changelog history</h1>
<h2>Version ${project.version} for minecraft ${project.minecraft.version}</h2>
<ul>
{{#tags}}
<li><h3>{{name}}</h3>
<hr/>
<ul>
{{#commits}}
<li>{{{message}}}</li>
{{/commits}}
</ul>
{{/tags}}
</ul>
    """
}

curseforge {
    apiKey = project.hasProperty('curseforge_apikey') ? project.curseforge_apikey : '0'
    project {
        id = '240633'
        changelog = file('CHANGELOG.html')
        changelogType = 'html'
        releaseType = 'beta'
    }
}

afterEvaluate {
    tasks.curseforge240633.dependsOn.remove(reobfJar)
    tasks.curseforge240633.dependsOn.remove(jar)
    tasks.curseforge240633.dependsOn.add(makeChangelog)
}
*/

processResources
{
}

jar {
    appendix = "1.14.2"
}

uploadArchives {
}

// This is a special task for pulling the version information from git and the environment (for BUILD_NUMBER)
def getGitVersion()
{
    def out = [:]

    // call git command.
    def outStream = new ByteArrayOutputStream()
    def result = exec {
        executable = 'git'
        args = [ 'describe', '--long', "--match=[^(jenkins)]*"]
        standardOutput = outStream
    }

    def fullVersion = outStream.toString().trim()
    def matcher = fullVersion =~ /(\d+).(\d+)-(\d+)-(.*)/

    def maj = matcher[0][1]
    def min = matcher[0][2]
    def rev = matcher[0][3]
    def bn = project.ext.properties.buildNumber ?: System.getenv("PROMOTED_NUMBER") ?: System.getenv("BUILD_NUMBER") ?: "1"

    out['inventorysorter.build.major.number'] = maj.toString()
    out['inventorysorter.build.minor.number'] = min.toString()
    out['inventorysorter.build.revision.number'] = rev.toString()
    out['inventorysorter.build.githash'] = matcher[0][4].toString()
    out['inventorysorter.build.number' ] = bn.toString()
    out['inventorysorter.version' ] = "${maj}.${min}.${rev}+${bn}".toString()

    return out
}
